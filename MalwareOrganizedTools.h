//
// Created by rojas on 15/03/17.
//

#include <dirent.h>
#include "Disassembler.h"
#include "Aux.h"

#ifndef ARCH_UNTIL_FEATURESEXTRACTION_MALWAREORGANIZEDTOOLS_H
#define ARCH_UNTIL_FEATURESEXTRACTION_MALWAREORGANIZEDTOOLS_H



class MalwareOrganizedTools {


    private:
        std::string malware_organized_root;
        const std::string DEFAULT_NAME_OF_EXEC_CODE_AND_ENTRY_POINT_FOLDER = "exec_code_and_entry_point";
        const std::string DEFAULT_NAME_OF_EXEC_FOLDER = "exe";
        const std::string DEFAULT_ASM_FOLDER = "assembly_code";
        const std::string DEFAULT_CFG_FOLDER = "cfg";
        const std::string DEFAULT_DFG_FOLDER = "cfg";
        std::string generated_r4_folder;
        std::string generated_cp_folder;
        std::string seeds_root;
        std::string seeds_asm_folder;
        std::string seeds_executable_folder;
        std::string seeds_exec_code_and_entry_point_folder;
        std::string seeds_dfg_folder;
        std::string seeds_cfg_folder;
        std::vector<std::string> names_that_are_not_exec_names = {DEFAULT_NAME_OF_EXEC_CODE_AND_ENTRY_POINT_FOLDER, DEFAULT_NAME_OF_EXEC_FOLDER, DEFAULT_ASM_FOLDER,
                                                                  DEFAULT_CFG_FOLDER, DEFAULT_DFG_FOLDER};

    public:
        MalwareOrganizedTools(std::string malware_organized_root);
        int update_generated_assembly_code(std::string generated_folder_addr);
        int update_seeds_assembly_code();
        int update_seeds_cfg();

};


#endif //ARCH_UNTIL_FEATURESEXTRACTION_MALWAREORGANIZEDTOOLS_H
